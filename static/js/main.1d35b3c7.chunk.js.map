{"version":3,"sources":["schemas/contact_schema.ts","hooks/use_forms.ts","components/hook_form.tsx","components/card.tsx","components/sub_form_validation.tsx","components/sub_form_fields.tsx","components/sub_forms.tsx","app.tsx","index.tsx"],"names":["contactSchema","Yup","firstName","max","required","lastName","email","useStore","create","combine","valuesMap","validationMap","schema","set","useForms","useFormValues","formKey","s","s0","s1","isEqual","useFormValidation","getInitValues","getState","getSchema","useAllFormKeys","Object","keys","length","addBlankForm","key","uniqueNamesGenerator","dictionaries","adjectives","colors","animals","prevState","setState","updateGlobalState","newVals","isValid","then","deleteForm","prev","deleteAllForms","HookForm","initialValues","React","useRef","current","validationSchema","formik","useFormik","onSubmit","_","validate","validateOnChange","useEffect","validateForm","formFields","style","textAlign","onClick","map","k","fieldKey","display","flexDirection","height","marginTop","htmlFor","id","name","type","onChange","handleChange","onBlur","handleBlur","value","values","errors","color","Card","children","border","borderRadius","padding","margin","SubFormValidation","Date","toISOString","SubFormValues","valuesString","JSON","stringify","SubForms","App","formKeys","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1d35b3c7.chunk.js","sourcesContent":["import * as Yup from 'yup'\n\nexport const contactSchema = Yup.object({\n  firstName: Yup.string()\n    .max(15, 'Must be 15 characters or less')\n    .required('Required'),\n\n  lastName: Yup.string()\n    .max(20, 'Must be 20 characters or less')\n    .required('Required'),\n\n  email: Yup.string().email('Invalid email address').required('Required'),\n})\n","import create from 'zustand'\nimport {combine} from 'zustand/middleware'\nimport {isEqual} from 'lodash'\nimport {\n  adjectives,\n  colors,\n  animals,\n  uniqueNamesGenerator,\n} from 'unique-names-generator'\n\nconst useStore = create(\n  combine(\n    {\n      valuesMap: {} as {[key: string]: {[key: string]: string}},\n      validationMap: {} as {[key: string]: boolean},\n      schema: {} as any,\n    },\n    (set) => ({\n      set,\n    })\n  )\n)\n\nconst useFormValues = (formKey: string) =>\n  useStore(\n    (s) => s.valuesMap[formKey],\n    (s0, s1) => isEqual(s0, s1)\n  )\n\nconst useFormValidation = (formKey: string) =>\n  useStore((s) => s.validationMap[formKey])\n\nconst getInitValues = (formKey: string) =>\n  useStore.getState().valuesMap[formKey]\n\nconst getSchema = () => useStore.getState().schema\n\nconst useFormKeys = () =>\n  useStore(\n    (s) => Object.keys(s.validationMap),\n    (s0, s1) => s0.length === s1.length\n  )\n\nconst addBlankForm = () => {\n  const key = uniqueNamesGenerator({\n    dictionaries: [adjectives, colors, animals],\n    length: 2,\n  })\n\n  const values = {\n    firstName: '',\n    lastName: '',\n    email: '',\n  }\n\n  const prevState = useStore.getState()\n  prevState.validationMap[key] = false\n  prevState.valuesMap[key] = values\n\n  useStore.setState({\n    validationMap: prevState.validationMap,\n    valuesMap: prevState.valuesMap,\n  })\n}\n\nconst updateGlobalState = (\n  newVals: Record<string, string>,\n  formKey: string\n) => {\n  const prevState = useStore.getState()\n\n  prevState.schema.isValid(newVals).then((isValid: boolean) => {\n    prevState.valuesMap[formKey] = newVals\n    prevState.validationMap[formKey] = isValid\n\n    useStore.setState({\n      validationMap: prevState.validationMap,\n      valuesMap: prevState.valuesMap,\n    })\n  })\n}\n\nconst deleteForm = (key:string) => {\n  const prev = useStore.getState()\n\n  delete prev.validationMap[key]\n  delete prev.valuesMap[key]\n\n  useStore.setState({\n    validationMap: prev.validationMap,\n    valuesMap: prev.valuesMap,\n  })\n}\n\nconst deleteAllForms = () => {\n  useStore.setState({\n    validationMap: {},\n    valuesMap: {},\n  })\n}\n\nexport const useForms = {\n  useStore,\n  useFormValues,\n  useFormValidation,\n  getInitValues,\n  getSchema,\n  useAllFormKeys: useFormKeys,\n  addBlankForm,\n  updateGlobalState,\n  deleteForm,\n  deleteAllForms\n}\n","import React from 'react'\nimport {useFormik} from 'formik'\nimport {useForms} from '../hooks/use_forms'\n\nexport const HookForm = ({formKey}: {formKey: string}) => {\n  const initialValues = React.useRef(useForms.getInitValues(formKey)).current\n  const validationSchema = React.useRef(useForms.getSchema()).current\n\n  const formik = useFormik({\n    initialValues,\n    validationSchema,\n    onSubmit: (_) => {},\n    validate: (newVals: any) => useForms.updateGlobalState(newVals, formKey),\n    validateOnChange: true,\n  })\n\n  React.useEffect(() => {\n    formik.validateForm()\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  const getField = (fieldKey: string) => {\n    return (\n      <div\n        key={fieldKey}\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          height: 75,\n          marginTop: 20\n        }}\n      >\n        <label htmlFor={fieldKey}>{fieldKey}</label>\n\n        <input\n          id={fieldKey}\n          name={fieldKey}\n          type=\"text\"\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          value={formik.values[fieldKey]}\n        />\n\n        {formik.errors[fieldKey] && (\n          <div style={{color: 'red'}}>\n            {'Error: ' + formik.errors[fieldKey]}\n          </div>\n        )}\n      </div>\n    )\n  }\n\n  const formFields = Object.keys(initialValues ?? {})\n\n  return (\n    <>\n      <div style={{textAlign: 'center'}}>{formKey}</div>\n\n      <button onClick={() => useForms.deleteForm(formKey)}>Delete</button>\n\n      <form>{formFields.map((k) => getField(k))}</form>\n    </>\n  )\n}\n","export const Card = ({children}: {children: JSX.Element}) => {\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        border: '1px solid black',\n        borderRadius: 10,\n        padding: 10,\n        margin: 10,\n      }}\n    >\n      {children}\n    </div>\n  )\n}\n","import {useForms} from 'src/hooks/use_forms'\n\nexport const SubFormValidation = ({formKey}: {formKey: string}) => {\n  const isValid = useForms.useFormValidation(formKey)\n\n  return (\n    <>\n      <div style={{textAlign: 'center'}}>{formKey + ' use form validation equality'}</div>\n      <div>{'isValid: ' + isValid}</div>\n      <div>{'renderedAt: ' + new Date().toISOString()}</div>\n    </>\n  )\n}\n","import {useForms} from 'src/hooks/use_forms'\n\nexport const SubFormValues = ({formKey}: {formKey: string}) => {\n  const values = useForms.useFormValues(formKey)\n\n  const valuesString = JSON.stringify(values)\n\n  return (\n    <>\n      <div style={{textAlign: 'center'}}>{formKey + ' use form values deep equality'}</div>\n      <div>{'values: ' + valuesString}</div>\n      <div>{'renderedAt: ' + new Date().toISOString()}</div>\n    </>\n  )\n}\n","import {useForms} from 'src/hooks/use_forms'\n\nexport const SubForms = () => {\n  const values = useForms.useStore(s => s)\n\n  const valuesString = JSON.stringify({...values.validationMap, ...values.valuesMap})\n\n  return (\n    <>\n      <div style={{textAlign: 'center'}}>{'use form store shallow equality: ==='}</div>\n      <div>{valuesString}</div>\n      <div>{'renderedAt: ' + new Date().toISOString()}</div>\n    </>\n  )\n}","import React from 'react'\nimport {contactSchema} from './schemas/contact_schema'\nimport {HookForm} from './components/hook_form'\nimport {useForms} from './hooks/use_forms'\nimport {Card} from './components/card'\nimport {SubFormValidation} from './components/sub_form_validation'\nimport {SubFormValues} from './components/sub_form_fields'\nimport { SubForms } from './components/sub_forms'\n\nexport const App = () => {\n  const formKeys = useForms.useAllFormKeys()\n\n  React.useEffect(() => {\n    useForms.useStore.setState({schema: contactSchema})\n  }, [])\n\n  return (\n    <>\n    <Card>\n      <>\n        <div style={{textAlign: 'center'}}>{'use forms length equality'}</div>\n\n        <button onClick={useForms.deleteAllForms}>Delete all forms</button>\n\n        <button onClick={useForms.addBlankForm}>Add blank form</button>\n\n        {formKeys.map((k) => (\n          <div key={k}>\n            <Card>\n              <HookForm formKey={k} />\n            </Card>\n\n            <Card>\n              <SubFormValues formKey={k} />\n            </Card>\n\n            <Card>\n              <SubFormValidation formKey={k} />\n            </Card>\n          </div>\n        ))}\n      </>\n    </Card>\n    \n    <Card>\n      <SubForms/>\n    </Card>\n    </>\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {App} from './app'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}